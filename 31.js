const containerOfPermutationsFunction = (initialWord) => {
  const completedPermutations = [];
  const recursiveWordPermutations = (remainingString, currentString) => {
    if(currentString.length === initialWord.length) {
      console.log('hasdfsa')
      completedPermutations.push(currentString)
    }
    currentString = currentString || '';
    //iterate over remaining string
    for(var i = 0; i < remainingString.length; i++){
      var newCurrentString = currentString + remainingString[i];
      var newRemainingString = remainingString.substr(0, i) + remainingString.substr(i + 1)
      recursiveWordPermutations(newRemainingString, newCurrentString)
    }
      //add character to String
      //slice character out of remaining string and call function recrsively
    // for(var i = 0; )
  }
  recursiveWordPermutations(initialWord, '')
  return completedPermutations
}

containerOfPermutationsFunction('hello')

/*
[ 'hello',
  'helol',
  'hello',
  'helol',
  'heoll',
  'heoll',
  'hlelo',
  'hleol',
  'hlleo',
  'hlloe',
  'hloel',
  'hlole',
  'hlelo',
  'hleol',
  'hlleo',
  'hlloe',
  'hloel',
  'hlole',
  'hoell',
  'hoell',
  'holel',
  'holle',
  'holel',
  'holle',
  'ehllo',
  'ehlol',
  'ehllo',
  'ehlol',
  'eholl',
  'eholl',
  'elhlo',
  'elhol',
  'ellho',
  'elloh',
  'elohl',
  'elolh',
  'elhlo',
  'elhol',
  'ellho',
  'elloh',
  'elohl',
  'elolh',
  'eohll',
  'eohll',
  'eolhl',
  'eollh',
  'eolhl',
  'eollh',
  'lhelo',
  'lheol',
  'lhleo',
  'lhloe',
  'lhoel',
  'lhole',
  'lehlo',
  'lehol',
  'lelho',
  'leloh',
  'leohl',
  'leolh',
  'llheo',
  'llhoe',
  'lleho',
  'lleoh',
  'llohe',
  'lloeh',
  'lohel',
  'lohle',
  'loehl',
  'loelh',
  'lolhe',
  'loleh',
  'lhelo',
  'lheol',
  'lhleo',
  'lhloe',
  'lhoel',
  'lhole',
  'lehlo',
  'lehol',
  'lelho',
  'leloh',
  'leohl',
  'leolh',
  'llheo',
  'llhoe',
  'lleho',
  'lleoh',
  'llohe',
  'lloeh',
  'lohel',
  'lohle',
  'loehl',
  'loelh',
  'lolhe',
  'loleh',
  'ohell',
  'ohell',
  'ohlel',
  'ohlle',
  'ohlel',
  'ohlle',
  'oehll',
  'oehll',
  'oelhl',
  'oellh',
  'oelhl',
  'oellh',
  'olhel',
  'olhle',
  'olehl',
  'olelh',
  'ollhe',
  'olleh',
  'olhel',
  'olhle',
  'olehl',
  'olelh',
  'ollhe',
  'olleh' ]
*/
